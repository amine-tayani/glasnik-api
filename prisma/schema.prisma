generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MOD
  BOT
}

enum CommunityType {
  PRIVATE
  PUBLIC
  DUO
}

enum ChannelMode {
  TEXT
  VOICE
}

model User {
  id               String      @id @default(uuid())
  email            String      @unique @db.VarChar(255)
  password         String      @db.VarChar(255)
  username         String      @unique @db.VarChar(255)
  avatar           String?
  banner           String?
  role             Role        @default(USER)
  resetToken       String?
  resetTokenExpiry DateTime?
  isActive         Boolean?    @default(true)
  verified         Boolean?    @default(false)
  isBlocked        Boolean     @default(false)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now()) @updatedAt
  communities      Community[] @relation("_CommunityToUser")
  communityId      String?
  messages         Message[]
  friends          User[]      @relation("UserFriendsUser", references: [id])
  friendOf         User[]      @relation("UserFriendsUser", references: [id])
  channel          Channel?    @relation(fields: [channelId], references: [id])
  channelId        String?
}

model Message {
  id          String     @id @default(uuid())
  text        String?
  timestamp   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  deletedAt   DateTime   @default(now())
  communityId String?
  senderId    String
  sender      User       @relation(fields: [senderId], references: [id])
  community   Community? @relation(fields: [communityId], references: [id])
  channel     Channel?   @relation(fields: [channelId], references: [id])
  channelId   String?
}

model Community {
  id           String        @id @default(uuid())
  name         String        @unique
  category     String
  icon         String?
  banner       String?
  description  String?
  member_count Int?           @default(0)
  type         CommunityType @default(PUBLIC)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  deletedAt    DateTime      @default(now())
  owner        Boolean?      @default(false)
  owner_id     String?
  user_id      String?
  messages     Message[]
  users        User[]        @relation("_CommunityToUser")
  channels     Channel[]
}

model Channel {
  id            String       @id @default(uuid())
  topic         String?      @unique
  mode          ChannelMode?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  deletedAt     DateTime     @default(now())
  messages      Message[]
  member_count  Int          @default(0)
  message_count Int          @default(0)
  owner_id      String
  communityId   String
  recipients    User[]
  community     Community    @relation(fields: [communityId], references: [id])
}
